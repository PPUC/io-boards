name: PPUC CI

on:
    push:
    pull_request:
    schedule:
        - cron: '0 8 * * *' # run at 08:00 UTC

jobs:
    pio-run:
        runs-on: ubuntu-latest

        strategy:
            fail-fast: false
            matrix:
                controller: ['EffectController', 'EffectControllerPico', 'InputController', 'IO_16_8_1', 'NanoController']

        name: PPUC ${{ matrix.controller }}

        steps:
            - uses: actions/checkout@v4

            - name: Checkout picotool
              uses: actions/checkout@v4
              with:
                repository: raspberrypi/picotool
                path: picotool

            - name: Build and install picotool
              run: |
                sudo apt-get update
                sudo apt-get install -y cmake build-essential libusb-1.0-0-dev
                cd picotool
                mkdir build
                cd build
                cmake ..
                make
                sudo cp picotool /usr/local/bin/

            - name: Cache pip
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Cache PlatformIO
              uses: actions/cache@v4
              with:
                path: ~/.platformio
                key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

            - name: Set up Python
              uses: actions/setup-python@v5

            - name: Install PlatformIO
              run: |
                python -m pip install --upgrade pip
                pip install --upgrade platformio

            - name: Run PlatformIO
              run: |
                cd test/${{ matrix.controller }}
                pio run

            - name: Create UF2 file
              run: |
                cd test/${{ matrix.controller }}
                ELF_FILE=$(find .pio/build/ -name "*.elf" | head -n 1)
                echo "Found ELF file: $ELF_FILE"
                picotool save "${ELF_FILE}" --format uf2 --output "${ELF_FILE%.elf}.uf2"

            - name: Upload UF2 artifact
              uses: actions/upload-artifact@v4
              with:
                name: ${{ matrix.controller }}-firmware
                path: |
                  test/${{ matrix.controller }}/.pio/build/**/*.uf2
