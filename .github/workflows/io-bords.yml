name: PPUC IO Boards

on:
    push:
    pull_request:
    schedule:
        - cron: '0 9 * * *' # run at 08:00 UTC

jobs:
  version:
    name: Detect version
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: version
        run: |
          VERSION_MAJOR=$(grep -Eo "FIRMWARE_VERSION_MAJOR\s+[0-9]+" src/PPUC.h | grep -Eo "[0-9]+")
          VERSION_MINOR=$(grep -Eo "FIRMWARE_VERSION_MINOR\s+[0-9]+" src/PPUC.h | grep -Eo "[0-9]+")
          VERSION_PATCH=$(grep -Eo "FIRMWARE_VERSION_PATCH\s+[0-9]+" src/PPUC.h | grep -Eo "[0-9]+")
          TAG="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
          echo "${TAG}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
      - name: Check git tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          GIT_TAG="${GITHUB_REF#refs/tags/}"
          EXPECTED_TAG="v${{ steps.version.outputs.tag }}"
          if [[ "${GIT_TAG}" != "${EXPECTED_TAG}" ]]; then
            echo "Error: Git tag (${GIT_TAG}) does not match version from PPUC.h (v${{ steps.version.outputs.tag }})"
            exit 1
          fi

  pio-run:
    name: Build and upload firmware
    runs-on: ubuntu-latest
    needs: [ version ]

    strategy:
      fail-fast: false
      matrix:
          controller: ['IO_16_8_1']

    steps:
      - name: PPUC ${{ matrix.controller }}
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Build elf2uf2 from source
        run: |
          sudo apt update && sudo apt install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi
          git clone https://github.com/ckormanyos/elf2uf2.git
          cd elf2uf2
          make all
          sudo cp bin/elf2uf2 /usr/local/bin/
          cd ..

      - name: Run PlatformIO
        run: |
          cd test/${{ matrix.controller }}
          pio run

      - name: Create UF2 file (using elf2uf2)
        run: |
          cd test/${{ matrix.controller }}
          ELF_FILE=$(find .pio/build/ -name "*.elf" | head -n 1)
          echo "Found ELF file: $ELF_FILE"
          elf2uf2 "$ELF_FILE" "${ELF_FILE%.elf}.uf2"
          cp ${ELF_FILE%.elf}.uf2 ../../${{ matrix.controller }}-${{ needs.version.outputs.tag }}.uf2
      - name: Upload UF2 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.controller }}-firmware
          path: |
            ${{ matrix.controller }}-${{ needs.version.outputs.tag }}.uf2

  post-build:
    runs-on: ubuntu-latest
    needs: [ version, pio-run ]
    name: Release
    steps:
      - uses: actions/download-artifact@v4
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          draft: true
          files: |
            *.uf2
